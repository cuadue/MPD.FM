enum State {
  CONNECTING
  PLAYING
  PAUSED
  STOPPED
}

type MyError {
  message: String
}

input MpdInstance {
  id: String
}

type Station {
  id: ID
  streamUrl: String!
  sortOrder: Int
  name: String
  description: String
  logoUrl: String
}

type Status {
  state: State!
  station: Station
  title: String
  volume: Int
  errorMessage: String
}

type MpdBackend {
  hostname: String
  port: Int
  version: String
}

type Volume {
  volume: Int
}

type Query {
  status(mpdInstance: MpdInstance!): Status!
  stations: [Station!]
  mpdBackend(mpdInstance: MpdInstance!): MpdBackend
  instanceIds: [String!]
}

input AddStationInput {
  streamUrl: String!
  name: String
  description: String
  logoUrl: String
}

type Mutation {
  play(mpdInstance: MpdInstance!, stationId: ID!): Status!
  stop(mpdInstance: MpdInstance!): Status!
  # addStation(mpdInstance: mpdInstance, input: AddStationInput!): Station!
  setVolume(mpdInstance: MpdInstance!, input: Int!): Volume!
}

type StatusChangedEvent {
  status: Status
  error: MyError
  mpdInstance: String!
}

type Subscription {
  statusChanged: StatusChangedEvent!
}